{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"My personal link page Here i keep track of intesting sites and stuff. This page is generated with the gen_index.sh command After making changes at the wiki you need to run the gen_index.sh to update this page The links Nederlands - Duch Links over de Nederlandse taal Linux dev tools Handy development tools i use in the linux cli Encryption Encryption tools for linux Linux backup tools A list of Linux backup tools Bash tutorials Handy bash-tools tutorials CheatSheets CheatSheets that might be handy to have a look at Linux CLI chat Chat tools in the linux shell CLI spreadsheet Create spreadsheets in Linux CLI Cluster management Linux cluster management tools code versioning GitHub like Linux code versioning tools Math tools Math tools in linux security tools Linux security tools virtualization Linux tools for machine virtualization Content creator Tools to generate static web-content","title":"My personal link page"},{"location":"#my-personal-link-page","text":"Here i keep track of intesting sites and stuff. This page is generated with the gen_index.sh command After making changes at the wiki you need to run the gen_index.sh to update this page","title":"My personal link page"},{"location":"#the-links","text":"Nederlands - Duch Links over de Nederlandse taal Linux dev tools Handy development tools i use in the linux cli Encryption Encryption tools for linux Linux backup tools A list of Linux backup tools Bash tutorials Handy bash-tools tutorials CheatSheets CheatSheets that might be handy to have a look at Linux CLI chat Chat tools in the linux shell CLI spreadsheet Create spreadsheets in Linux CLI Cluster management Linux cluster management tools code versioning GitHub like Linux code versioning tools Math tools Math tools in linux security tools Linux security tools virtualization Linux tools for machine virtualization Content creator Tools to generate static web-content","title":"The links"},{"location":"Dutch-%E2%80%90-Nederlands/","text":"Over de Nederlandse taal H\u00e9t YouTube-kanaal over de Nederlandse taal! Arnoud Kuijpers geeft handige instructies over de Nederlanse taal. Zeker de moeite waard om eens te bekijken.","title":"Nederlands - Duch"},{"location":"Dutch-%E2%80%90-Nederlands/#over-de-nederlandse-taal","text":"H\u00e9t YouTube-kanaal over de Nederlandse taal! Arnoud Kuijpers geeft handige instructies over de Nederlanse taal. Zeker de moeite waard om eens te bekijken.","title":"Over de Nederlandse taal"},{"location":"Linux-%E2%80%90-CLI-developement-tools/","text":"Conquer of completion Conquer of completion - a extension for vim in nodejs for vim & neovim, load extensions like VSCode and host language servers find this project on Github . Make your Vim/Neovim as smart as VS Code","title":"Linux dev tools"},{"location":"Linux-%E2%80%90-CLI-developement-tools/#conquer-of-completion","text":"Conquer of completion - a extension for vim in nodejs for vim & neovim, load extensions like VSCode and host language servers find this project on Github . Make your Vim/Neovim as smart as VS Code","title":"Conquer of completion"},{"location":"Linux-%E2%80%90-Encrypt-files-and-store-passwords/","text":"Tomb Tomb manage secret files in volumes protected by strong encryption.","title":"Encryption"},{"location":"Linux-%E2%80%90-Encrypt-files-and-store-passwords/#tomb","text":"Tomb manage secret files in volumes protected by strong encryption.","title":"Tomb"},{"location":"Linux-%E2%80%90-backup-tools/","text":"UrBackup UrBackup - Open Source client/server backup system borgBackup borgbackup - Deduplicating archiver with compression and encryption rClone Rclone rsync for cloud storage is a command-line program to sync files and directories to and from different cloud storage providers.","title":"Linux backup tools"},{"location":"Linux-%E2%80%90-backup-tools/#urbackup","text":"UrBackup - Open Source client/server backup system","title":"UrBackup"},{"location":"Linux-%E2%80%90-backup-tools/#borgbackup","text":"borgbackup - Deduplicating archiver with compression and encryption","title":"borgBackup"},{"location":"Linux-%E2%80%90-backup-tools/#rclone","text":"Rclone rsync for cloud storage is a command-line program to sync files and directories to and from different cloud storage providers.","title":"rClone"},{"location":"Linux-%E2%80%90-bash-tutorials-i-found-handy-and-clear/","text":"Bash tutuorials grep tutorial by Bruce Barnett sed tutorial by Bruce Barnerr awk tutorial by Bruce Barnett","title":"Bash tutorials"},{"location":"Linux-%E2%80%90-bash-tutorials-i-found-handy-and-clear/#bash-tutuorials","text":"grep tutorial by Bruce Barnett sed tutorial by Bruce Barnerr awk tutorial by Bruce Barnett","title":"Bash tutuorials"},{"location":"Linux-%E2%80%90-cheatsheets/","text":"A Colection from Rico Collection cheatsheets Amazing collection of cheatsheets by Rico Sta. Cruz","title":"CheatSheets"},{"location":"Linux-%E2%80%90-cheatsheets/#a-colection-from-rico","text":"Collection cheatsheets Amazing collection of cheatsheets by Rico Sta. Cruz","title":"A Colection from Rico"},{"location":"Linux-%E2%80%90-cli-chat-tools/","text":"nchat nchat - a linux commandline chat application for WhatsApp build by Kristofer Berggren nchat also works with telegram. It's the best linux cli whatsapp chat option at the moment.","title":"Linux CLI chat"},{"location":"Linux-%E2%80%90-cli-chat-tools/#nchat","text":"nchat - a linux commandline chat application for WhatsApp build by Kristofer Berggren nchat also works with telegram. It's the best linux cli whatsapp chat option at the moment.","title":"nchat"},{"location":"Linux-%E2%80%90-cli-spreadsheet/","text":"SC-IM sc-im Spreadsheet Calculator Improvised - a new version of sc with Bram Moolenaar his vim editor keybindings build in.","title":"CLI spreadsheet"},{"location":"Linux-%E2%80%90-cli-spreadsheet/#sc-im","text":"sc-im Spreadsheet Calculator Improvised - a new version of sc with Bram Moolenaar his vim editor keybindings build in.","title":"SC-IM"},{"location":"Linux-%E2%80%90-cluster-management/","text":"Slurm Slurm open-source cluster resource management and job scheduling","title":"Cluster management"},{"location":"Linux-%E2%80%90-cluster-management/#slurm","text":"Slurm open-source cluster resource management and job scheduling","title":"Slurm"},{"location":"Linux-%E2%80%90-code-version-control/","text":"Kallithea Kallithea - A tool for Mercurial and Git with a built-in push/pull server, with full text search and code-review. Gitea gitea - The goal of gitea is to make the easiest, fastest, and most painless way of setting up a self-hosted Git service.","title":"code versioning"},{"location":"Linux-%E2%80%90-code-version-control/#kallithea","text":"Kallithea - A tool for Mercurial and Git with a built-in push/pull server, with full text search and code-review.","title":"Kallithea"},{"location":"Linux-%E2%80%90-code-version-control/#gitea","text":"gitea - The goal of gitea is to make the easiest, fastest, and most painless way of setting up a self-hosted Git service.","title":"Gitea"},{"location":"Linux-%E2%80%90-math-tools/","text":"SageMath SageMath can be used to study elementary and advanced, pure and applied mathematics. SageMath is a free open-source aviable on the gitHub mathematics software system licensed under the GPL. It builds on top of many existing open-source packages: NumPy , SciPy , matplotlib , Sympy , Maxima , GAP , FLINT , R and many more . Access their combined power through a common, Python-based language or directly via interfaces or wrappers. A amazing handy video tutorial can be found here Katex KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web. Find KaTeX on GitHub MatPlotLib Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations","title":"Math tools"},{"location":"Linux-%E2%80%90-math-tools/#sagemath","text":"SageMath can be used to study elementary and advanced, pure and applied mathematics. SageMath is a free open-source aviable on the gitHub mathematics software system licensed under the GPL. It builds on top of many existing open-source packages: NumPy , SciPy , matplotlib , Sympy , Maxima , GAP , FLINT , R and many more . Access their combined power through a common, Python-based language or directly via interfaces or wrappers. A amazing handy video tutorial can be found here","title":"SageMath"},{"location":"Linux-%E2%80%90-math-tools/#katex","text":"KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web. Find KaTeX on GitHub","title":"Katex"},{"location":"Linux-%E2%80%90-math-tools/#matplotlib","text":"Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations","title":"MatPlotLib"},{"location":"Linux-%E2%80%90-server-security-tools/","text":"CRS Project The OWASP\u00ae CRS is a set of generic attack detection rules for use with ModSecurity or compatible web application firewalls. The CRS aims to protect web applications from a wide range of attacks, including the OWASP Top Ten, with a minimum of false alerts. The CRS provides protection against many common attack categories. You can run this as a Proxy-filter to implement all the OWASP rule sets at once. With NGINX you need to use the latest ModSecurity. For NGINX you can compile CRS inside ModSecurity UFW Simple firewall module - not handy if you use dockers Samhain Samhain is a Linux based intrusion detection system it provides file integrity checking and log file monitoring/analysis, as well as rootkit detection, port monitoring, detection of rogue SUID executables, and hidden processes. You can run this on your desktop and servers. Samhain has been designed to monitor multiple hosts with potentially different operating systems, providing centralized logging and maintenance, although it can also be used as standalone application on a single host.","title":"security tools"},{"location":"Linux-%E2%80%90-server-security-tools/#crs-project","text":"The OWASP\u00ae CRS is a set of generic attack detection rules for use with ModSecurity or compatible web application firewalls. The CRS aims to protect web applications from a wide range of attacks, including the OWASP Top Ten, with a minimum of false alerts. The CRS provides protection against many common attack categories. You can run this as a Proxy-filter to implement all the OWASP rule sets at once. With NGINX you need to use the latest ModSecurity. For NGINX you can compile CRS inside ModSecurity","title":"CRS Project"},{"location":"Linux-%E2%80%90-server-security-tools/#ufw","text":"Simple firewall module - not handy if you use dockers","title":"UFW"},{"location":"Linux-%E2%80%90-server-security-tools/#samhain","text":"Samhain is a Linux based intrusion detection system it provides file integrity checking and log file monitoring/analysis, as well as rootkit detection, port monitoring, detection of rogue SUID executables, and hidden processes. You can run this on your desktop and servers. Samhain has been designed to monitor multiple hosts with potentially different operating systems, providing centralized logging and maintenance, although it can also be used as standalone application on a single host.","title":"Samhain"},{"location":"Linux-%E2%80%90-server-virtualization-tools/","text":"virt-backup virt-backup - hot external backups of your Libvirt guests, using the BlockCommit feature. The goal of virt-backup is to do an automatic backup system, with optional compression, and be able to easily restore a backup.","title":"virtualization"},{"location":"Linux-%E2%80%90-server-virtualization-tools/#virt-backup","text":"virt-backup - hot external backups of your Libvirt guests, using the BlockCommit feature. The goal of virt-backup is to do an automatic backup system, with optional compression, and be able to easily restore a backup.","title":"virt-backup"},{"location":"Linux-%E2%80%90-website-builders/","text":"Pelican Pelican - a static site generator, written in Python Have a look at the Themes Starlight Starlight - a documentation website framework for Astro havea look at the themes Have a look here What i like about StarLight is their CO2 list, how to they measure software how ecoFriendly it is. Have a look at the co2 friendy list astro made. mkdocs mkdocs - A friendly document generator wide used.","title":"Content creator"},{"location":"Linux-%E2%80%90-website-builders/#pelican","text":"Pelican - a static site generator, written in Python Have a look at the Themes","title":"Pelican"},{"location":"Linux-%E2%80%90-website-builders/#starlight","text":"Starlight - a documentation website framework for Astro havea look at the themes Have a look here What i like about StarLight is their CO2 list, how to they measure software how ecoFriendly it is. Have a look at the co2 friendy list astro made.","title":"Starlight"},{"location":"Linux-%E2%80%90-website-builders/#mkdocs","text":"mkdocs - A friendly document generator wide used.","title":"mkdocs"},{"location":"test/","text":"Contributing This project follows the Read the Docs :doc: code of conduct <rtd-dev:code-of-conduct> . If you are not familiar with our code of conduct policy, take a minute to read the policy before starting with your first contribution. .. tip:: There is a new dockerized build environment, see :ref: dockerized-build . Modifying the theme The styles for this theme use SASS_ and a custom CSS framework called Wyrm_. We use Webpack_ and node-sass_ to build the CSS. Webpack_ is used to watch for changes, rebuild the static assets, and rebuild the Sphinx demo documentation. .. note:: The installation of Node is outside the scope of this documentation. You will need Node version 10+ in order to make changes to this theme. Set up your environment . Install Sphinx_ and documentation build dependencies. .. code:: console $ pip install -e '.[dev]' . Install Webpack_, node-sass_, and theme dependencies locally. .. code:: console $ npm install Making changes Changes to the theme can be compiled and tested with Webpack_: .. code:: console $ npm run dev This script will do the following: . Install and update any dependencies. . Build the static CSS from SASS source files. . Build the demo documentation. . Watch for changes to the SASS files and documentation and rebuild everything on any detected changes. Alternatively, if you don't need to watch the files, the release build script can be used to test built assets: .. code:: console $ npm run build .. _Webpack: https://webpack.js.org/ .. _node-sass: https://github.com/sass/node-sass .. _SASS: http://www.sass-lang.com .. _Wyrm: http://www.github.com/snide/wyrm/ .. _Sphinx: http://www.sphinx-doc.org/en/stable/ .. _dockerized-build: Dockerized development If you have Docker available on your platform, you can get started building CSS and JS artifacts a bit faster and won't have to worry about any of the setup spilling over into your general environment. When building with Docker, we create an image containing the build dependencies. Some of these are quite outdated and therefore ideal to isolate a container. The image is tagged as sphinx_rtd_theme:latest . Inside the running docker image, we mount the working copy of the repository, build the artifacts and finally observe that the artifacts have been built and left in your current git checkout. Use the following steps: .. code-block:: console # Builds an updated version of the docker image $ docker-compose build # Runs the development webserver $ docker-compose run sphinx_rtd_theme dev # If you want to copy stuff out of the Docker environment, run this make # target or read the actual Makefile to see what is going on. # We suggest running this command every time that you want to quickly build # new CSS/JS assets $ make docker-build-all Every time you change the Node or Python requirements, you will need to rebuild images with docker-compose run sphinx_rtd_theme build . If you change SASS or JS, you will need to rebuild assets. Testing QA testing theme changes and pull requests is complex, due to backwards compatibility. The following cases need to be tested with changes to CSS or JavaScript: Multiple, modern browsers should be tested. Multiple viewport sizes should be tested for changes. We support large, tablet, and mobile viewport sizes We currently support only HTML5 writer. Multiple major versions of Sphinx should be tested. We currently support Sphinx >=6.0 It's easiest to test combinations of dependency versions using tox : .. code:: console % tox -e py312-sphinx74 If the tests and build are successful, you can view the built documentation at the directory noted by Sphinx: .. code:: console build succeeded, 10 warnings. The HTML pages are in .tox/py312-sphinx74/tmp/html. ___________________________ summary ___________________________ py312-sphinx74: commands succeeded congratulations :) You can then open up this path with a series of browsers to test. The best way to spot UI issues is to compare two or more builds. You can build multiple tox environments, and open both up for comparison: .. code:: console % tox -e py312-sphinx62 ... % tox -e py312-sphinx74 ... % firefox .tox/py312-sphinx62/tmp/html/index.html % firefox .tox/py312-sphinx74/tmp/html/index.html You can also use a separate tox environment for building output to compare against. All of the tox environments have an additional postfix, -qa , to allow building the same environment twice, without overwriting any files. In this test scenario, you would build from a branch or tag before building the same tox environment for the pull request branch you are testing. For example, to test against the tag 0.5.2 : .. code:: console % git checkout 0.5.2 % tox -e py310-sphinx53-qa ... % git checkout feature/example-pull-request % tox -e py310-sphinx53 ... % firefox .tox/py310-sphinx53-qa/tmp/html/index.html % firefox .tox/py310-sphinx53/tmp/html/index.html Currently, the most important environments to QA are: .. This list is purposely shorter than what we describe above. If we test all of the cases above, we'll be here all day. Python 3, and latest minor of each major Sphinx release should give us enough work. py312-sphinx62 py312-sphinx74 py312-sphinx80 py312-sphinxlatest py312-sphinxdev Translations Translations are managed using Transifex _. You can join any of the existing language teams or request a new language is added to the project. For more information on our translation standards, see our docs on :doc: rtd-dev:i18n Periodically, core team should update the translation files outside our normal releases. Someone from the core team, with write access to Transifex, should run the following: .. code:: console $ python setup.py update_translations This will extract new messages, upload the messages to Transifex, and will update our local translation files. Changes can be checked in to a branch and put up for review. .. _Transifex: https://www.transifex.com/readthedocs/sphinx-rtd-theme Versioning .. TODO make these instructions organization wide. We've talked about standardizing packaging version and tooling here (bumpver instead of bump2version). In between releases, the package version specified will always be a alpha release, matching 1.1.1alpha1 . As pull requests are merged and the release impact changes, this version will incremented ahead of release. For example, if we merge a new feature pull request, we'd run bump2version minor to increment 1.1.1alpha1 to 1.2.0alpha1 . To put out a release for testing, we will upload a release candidate. We would run bump2version release to increment 1.2.0alpha1 to 1.2.0rc1 . After a testing period, the release candidate can become a full release. We would run bump2version release again to increment 1.2.0rc1 to 1.2.0 . After the release process below, we increment the version again, so that the development version -- the version found in the repository -- is always greater than the most recent release. We follow up with another pull request by running bump2version patch , which increments 1.2.0 to 1.2.1alpha1 . Releasing the theme To release a new version of the theme, core team will take the following steps: . Install the required depedencies with pip install '.[dev]' . . Bump the version by running bump2version [major|minor|patch|dev] . This will automatically increase the correct part(s) of the version number, you do not need to specify the exact version number. We follow semantic versioning and PEP440 (with regards to alpha release and development versions). The version increment should reflect these releases and any potentially breaking changes. . New versions are by default alpha releases. If this is a release candidate, run bump2version --allow-dirty release to update the release to an rc release. If this is a final release, run the command again. . Update the changelog ( docs/changelog.rst ) with the version information. . Run python setup.py update_translations to compile new translation files and update Transifex. . Run npm install && npm run build to rebuild all the theme assets, notice that package-lock.json will be updated with a new package version. But take care that it isn't also bumping versions of dependencies in ways that are risky to the release. If package-lock.json changes, you need to commit it to git and tag it together with your release. . Commit these changes to a pull request. . Merge the pull request after review. . Check out master branch locally for tagging. Remember to pull from remote . . Tag the release in git: git tag $NEW_VERSION . . Push the tag to GitHub: git push --tags origin . . Upload the package to PyPI: .. code:: console $ rm -rf dist/ $ python setup.py sdist bdist_wheel $ twine upload --sign --identity security@readthedocs.org dist/* . Finally, open a new pull request updating the development release version to the next patch by running bump2version patch . Open a pull request with this change. See Versioning _ above for more details. .. _PEP440: https://www.python.org/dev/peps/pep-0440/ .. _semantic versioning: http://semver.org/","title":"Test"},{"location":"test/#modifying-the-theme","text":"The styles for this theme use SASS_ and a custom CSS framework called Wyrm_. We use Webpack_ and node-sass_ to build the CSS. Webpack_ is used to watch for changes, rebuild the static assets, and rebuild the Sphinx demo documentation. .. note:: The installation of Node is outside the scope of this documentation. You will need Node version 10+ in order to make changes to this theme.","title":"Modifying the theme"},{"location":"test/#set-up-your-environment","text":"","title":"Set up your environment"},{"location":"test/#install-sphinx_-and-documentation-build-dependencies","text":".. code:: console $ pip install -e '.[dev]'","title":". Install Sphinx_ and documentation build dependencies."},{"location":"test/#install-webpack_-node-sass_-and-theme-dependencies-locally","text":".. code:: console $ npm install","title":". Install Webpack_, node-sass_, and theme dependencies locally."},{"location":"test/#making-changes","text":"Changes to the theme can be compiled and tested with Webpack_: .. code:: console $ npm run dev This script will do the following:","title":"Making changes"},{"location":"test/#install-and-update-any-dependencies","text":"","title":". Install and update any dependencies."},{"location":"test/#build-the-static-css-from-sass-source-files","text":"","title":". Build the static CSS from SASS source files."},{"location":"test/#build-the-demo-documentation","text":"","title":". Build the demo documentation."},{"location":"test/#watch-for-changes-to-the-sass-files-and-documentation-and-rebuild-everything","text":"on any detected changes. Alternatively, if you don't need to watch the files, the release build script can be used to test built assets: .. code:: console $ npm run build .. _Webpack: https://webpack.js.org/ .. _node-sass: https://github.com/sass/node-sass .. _SASS: http://www.sass-lang.com .. _Wyrm: http://www.github.com/snide/wyrm/ .. _Sphinx: http://www.sphinx-doc.org/en/stable/ .. _dockerized-build:","title":". Watch for changes to the SASS files and documentation and rebuild everything"},{"location":"test/#dockerized-development","text":"If you have Docker available on your platform, you can get started building CSS and JS artifacts a bit faster and won't have to worry about any of the setup spilling over into your general environment. When building with Docker, we create an image containing the build dependencies. Some of these are quite outdated and therefore ideal to isolate a container. The image is tagged as sphinx_rtd_theme:latest . Inside the running docker image, we mount the working copy of the repository, build the artifacts and finally observe that the artifacts have been built and left in your current git checkout. Use the following steps: .. code-block:: console # Builds an updated version of the docker image $ docker-compose build # Runs the development webserver $ docker-compose run sphinx_rtd_theme dev # If you want to copy stuff out of the Docker environment, run this make # target or read the actual Makefile to see what is going on. # We suggest running this command every time that you want to quickly build # new CSS/JS assets $ make docker-build-all Every time you change the Node or Python requirements, you will need to rebuild images with docker-compose run sphinx_rtd_theme build . If you change SASS or JS, you will need to rebuild assets.","title":"Dockerized development"},{"location":"test/#testing","text":"QA testing theme changes and pull requests is complex, due to backwards compatibility. The following cases need to be tested with changes to CSS or JavaScript: Multiple, modern browsers should be tested. Multiple viewport sizes should be tested for changes. We support large, tablet, and mobile viewport sizes We currently support only HTML5 writer. Multiple major versions of Sphinx should be tested. We currently support Sphinx >=6.0 It's easiest to test combinations of dependency versions using tox : .. code:: console % tox -e py312-sphinx74 If the tests and build are successful, you can view the built documentation at the directory noted by Sphinx: .. code:: console build succeeded, 10 warnings. The HTML pages are in .tox/py312-sphinx74/tmp/html. ___________________________ summary ___________________________ py312-sphinx74: commands succeeded congratulations :) You can then open up this path with a series of browsers to test. The best way to spot UI issues is to compare two or more builds. You can build multiple tox environments, and open both up for comparison: .. code:: console % tox -e py312-sphinx62 ... % tox -e py312-sphinx74 ... % firefox .tox/py312-sphinx62/tmp/html/index.html % firefox .tox/py312-sphinx74/tmp/html/index.html You can also use a separate tox environment for building output to compare against. All of the tox environments have an additional postfix, -qa , to allow building the same environment twice, without overwriting any files. In this test scenario, you would build from a branch or tag before building the same tox environment for the pull request branch you are testing. For example, to test against the tag 0.5.2 : .. code:: console % git checkout 0.5.2 % tox -e py310-sphinx53-qa ... % git checkout feature/example-pull-request % tox -e py310-sphinx53 ... % firefox .tox/py310-sphinx53-qa/tmp/html/index.html % firefox .tox/py310-sphinx53/tmp/html/index.html Currently, the most important environments to QA are: .. This list is purposely shorter than what we describe above. If we test all of the cases above, we'll be here all day. Python 3, and latest minor of each major Sphinx release should give us enough work. py312-sphinx62 py312-sphinx74 py312-sphinx80 py312-sphinxlatest py312-sphinxdev","title":"Testing"},{"location":"test/#translations","text":"Translations are managed using Transifex _. You can join any of the existing language teams or request a new language is added to the project. For more information on our translation standards, see our docs on :doc: rtd-dev:i18n Periodically, core team should update the translation files outside our normal releases. Someone from the core team, with write access to Transifex, should run the following: .. code:: console $ python setup.py update_translations This will extract new messages, upload the messages to Transifex, and will update our local translation files. Changes can be checked in to a branch and put up for review. .. _Transifex: https://www.transifex.com/readthedocs/sphinx-rtd-theme","title":"Translations"},{"location":"test/#versioning","text":".. TODO make these instructions organization wide. We've talked about standardizing packaging version and tooling here (bumpver instead of bump2version). In between releases, the package version specified will always be a alpha release, matching 1.1.1alpha1 . As pull requests are merged and the release impact changes, this version will incremented ahead of release. For example, if we merge a new feature pull request, we'd run bump2version minor to increment 1.1.1alpha1 to 1.2.0alpha1 . To put out a release for testing, we will upload a release candidate. We would run bump2version release to increment 1.2.0alpha1 to 1.2.0rc1 . After a testing period, the release candidate can become a full release. We would run bump2version release again to increment 1.2.0rc1 to 1.2.0 . After the release process below, we increment the version again, so that the development version -- the version found in the repository -- is always greater than the most recent release. We follow up with another pull request by running bump2version patch , which increments 1.2.0 to 1.2.1alpha1 .","title":"Versioning"},{"location":"test/#releasing-the-theme","text":"To release a new version of the theme, core team will take the following steps:","title":"Releasing the theme"},{"location":"test/#install-the-required-depedencies-with-pip-install-dev","text":"","title":". Install the required depedencies with pip install '.[dev]'."},{"location":"test/#bump-the-version-by-running-bump2version-majorminorpatchdev","text":"This will automatically increase the correct part(s) of the version number, you do not need to specify the exact version number. We follow semantic versioning and PEP440 (with regards to alpha release and development versions). The version increment should reflect these releases and any potentially breaking changes.","title":". Bump the version by running bump2version [major|minor|patch|dev]."},{"location":"test/#new-versions-are-by-default-alpha-releases-if-this-is-a-release-candidate","text":"run bump2version --allow-dirty release to update the release to an rc release. If this is a final release, run the command again.","title":". New versions are by default alpha releases. If this is a release candidate,"},{"location":"test/#update-the-changelog-docschangelogrst-with-the-version-information","text":"","title":". Update the changelog (docs/changelog.rst) with the version information."},{"location":"test/#run-python-setuppy-update_translations-to-compile-new-translation-files","text":"and update Transifex.","title":". Run python setup.py update_translations to compile new translation files"},{"location":"test/#run-npm-install-npm-run-build-to-rebuild-all-the-theme-assets","text":"notice that package-lock.json will be updated with a new package version. But take care that it isn't also bumping versions of dependencies in ways that are risky to the release. If package-lock.json changes, you need to commit it to git and tag it together with your release.","title":". Run npm install &amp;&amp; npm run build to rebuild all the theme assets,"},{"location":"test/#commit-these-changes-to-a-pull-request","text":"","title":". Commit these changes to a pull request."},{"location":"test/#merge-the-pull-request-after-review","text":"","title":". Merge the pull request after review."},{"location":"test/#check-out-master-branch-locally-for-tagging-remember-to-pull-from-remote","text":"","title":". Check out master branch locally for tagging. Remember to pull from remote."},{"location":"test/#tag-the-release-in-git-git-tag-new_version","text":"","title":". Tag the release in git: git tag $NEW_VERSION."},{"location":"test/#push-the-tag-to-github-git-push-tags-origin","text":"","title":". Push the tag to GitHub: git push --tags origin."},{"location":"test/#upload-the-package-to-pypi","text":".. code:: console $ rm -rf dist/ $ python setup.py sdist bdist_wheel $ twine upload --sign --identity security@readthedocs.org dist/*","title":". Upload the package to PyPI:"},{"location":"test/#finally-open-a-new-pull-request-updating-the-development-release-version-to","text":"the next patch by running bump2version patch . Open a pull request with this change. See Versioning _ above for more details. .. _PEP440: https://www.python.org/dev/peps/pep-0440/ .. _semantic versioning: http://semver.org/","title":". Finally, open a new pull request updating the development release version to"}]}